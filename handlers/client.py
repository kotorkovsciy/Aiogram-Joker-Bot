from aiogram import Dispatcher, types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher.filters.state import State, StatesGroup
from create_bot import sql, Anekdot
from keyboards import kb_client, kb_record, kb_aon


class record(StatesGroup):
    quantity = State()
    joke = State()
    author = State()


class delete(StatesGroup):
    user_id = State()
    aon = State()


async def cmd_start(message: types.Message):
    if message.chat.type == 'private':
        if not await sql.userExists(message.from_user.id):
            await sql.userAdd(message.from_user.id)
    await message.answer("–ß—Ç–æ –≤—ã–±–∏—Ä–∞–µ—Ç–µ ?", reply_markup=kb_client)


async def random_bot_joke(message: types.Message):
    await message.reply(await sql.randomJoke())


async def random_joke(message: types.Message):
    msg = await message.answer("–ó–∞–≥—Ä—É–∂–∞—é")
    await msg.edit_text(await Anekdot.getAnekdot())


async def my_joke(message: types.Message):
    await message.answer(await sql.myJoke(message.from_user.id))


async def delet_step(message: types.Message, state: FSMContext):
    await delete.user_id.set()
    await state.update_data(user_id=message.from_user.id)
    await message.answer("–í—ã —É–≤–µ—Ä–µ–Ω—ã ?", reply_markup=kb_aon)
    await delete.aon.set()


async def delete_res(message: types.Message, state: FSMContext):
    await state.update_data(aon=message.text.lower())
    user_data = await state.get_data()
    match user_data["aon"]:
        case "–¥–∞":
            await sql.deleteJokesUser(user_data["user_id"])
            await state.finish()
            await message.answer("üóë –®—É—Ç–∫–∏ —É–¥–∞–ª–µ–Ω—ã üóë", reply_markup=kb_client)
        case "–Ω–µ—Ç":
            await state.finish()
            await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=kb_client)
        case _:
            await message.answer("–î–∞ –∏–ª–∏ –ù–µ—Ç", reply_markup=kb_aon)
            return


async def joke_step(message: types.Message, state: FSMContext):
    await record.quantity.set()
    quantity = await sql.quantityJokesUser(message.from_user.id)
    await state.update_data(quantity=quantity)
    if quantity < 10:
        await message.answer(text='–ù–∞–ø–∏—à–∏ —à—É—Ç–∫—É', reply_markup=kb_record)
        await record.joke.set()
    else:
        await state.finish()
        await message.answer(f'–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç —à—É—Ç–æ–∫ {quantity}/10', reply_markup=kb_client)


async def author_step(message: types.Message, state: FSMContext):
    await state.update_data(joke=message.text)
    await message.answer(text='–í–≤–µ–¥–∏—Ç–µ –∞–≤—Ç–æ—Ä–∞')
    await record.author.set()


async def cmd_cancel(message: types.Message, state: FSMContext):
    await state.finish()
    await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=kb_client)


async def res_step(message: types.Message, state: FSMContext):
    await state.update_data(author=message.text)
    user_data = await state.get_data()
    await sql.recordJoke(user_data['joke'], user_data['author'], message.from_user.id)
    await message.answer(f"–ó–∞–ø–∏—Å–∞–Ω–æ {user_data['quantity']+1}/10", reply_markup=kb_client)
    await state.finish()


def register_handlers_client(dp: Dispatcher):
    dp.register_message_handler(cmd_start, commands="start")
    dp.register_message_handler(cmd_start, Text(
        equals="–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))
    dp.register_message_handler(random_bot_joke, Text(
        equals="–®—É—Ç–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–æ—Ç–∞"))
    dp.register_message_handler(random_joke, Text(
        equals="–®—É—Ç–∫—É —Ä–∞–Ω–¥–æ–º–Ω—É—é –∏–∑ –∏–Ω–µ—Ç–∞"))
    dp.register_message_handler(my_joke, Text(equals="–ú–æ–∏ —à—É—Ç–∫–∏"))
    dp.register_message_handler(delet_step, Text(
        equals="–£–¥–∞–ª–∏—Ç—å –º–æ–∏ –®—É—Ç–∫–∏"), state="*")
    dp.register_message_handler(
        delete_res, state=delete.aon, content_types=types.ContentTypes.TEXT)
    dp.register_message_handler(joke_step, Text(
        equals="–ó–∞–ø–∏—Å–∞—Ç—å —à—É—Ç–∫—É"), state="*")
    dp.register_message_handler(cmd_cancel, commands="cancel", state="*")
    dp.register_message_handler(cmd_cancel, Text(
        equals="–æ—Ç–º–µ–Ω–∞", ignore_case=True), state="*")
    dp.register_message_handler(
        author_step, state=record.joke, content_types=types.ContentTypes.TEXT)
    dp.register_message_handler(
        res_step, state=record.author, content_types=types.ContentTypes.TEXT)
